{"name":"micROS RT","tagline":"an implementation of ROS 1.x on DDS","body":"Please contact us through [bding@msn.com](mailto:bding@msn.com). Any feedback would be greatly appreciated.\r\n\r\nMore information can be found in the user's manual of micROS RT ([download](https://github.com/cyberdb/micROS-RT/blob/master/docs/manual.pdf)) and our website [http://micros.nudt.edu.cn/](http://micros.nudt.edu.cn/index_english.html)\r\n\r\n# Introduction\r\n\r\nmicROS RT (micROS Real-Time) is a modified ROS C++ kernel which adopts OMG's DDS (Data Distribution Systems for Realtime Systems) as its underlying message transfer protocol. DDS is an Object Management Group's standard for pub/sub middleware (http://portals.omg.org/dds/). It supports high-performance, scalable and QoS-assuring message delivery. It has been applied into many industry-level systems. By replacing the original ROS message protocols (TCPROS & UDPROS) with DDS, a set of advanced features can be supported in the ROS message delivery process.\r\n\r\n(1) **Enabling multi-cast**. When there are _n_ listeners in a topic (_n_>=2), significant performance advantage can be obtained.\r\n\r\n(2) **Robustness in unexpected settings**. For example, it has better reconnection behavior when dropping out of wireless (according to the report of Dirk Thomas [link](http://roscon.ros.org/2014/wp-content/uploads/2014/07/ROSCON-2014-Next-Generation-of-ROS-on-top-of-DDS.pdf)).\r\n\r\n(3) **Real-time and other QoS assurance in message delivery**. For example, you can set the transport priority and latency budget of messages, specify expected message arriving deadline and the behavior when the deadline is not met, set time-based filter to the messages on a topic, and so on.\r\n\r\nExisting ROS packages can easily benefit from feature 1 and 2. No modification/recompilation is needed and the only thing you should do is to replace a library file in the ROS installation path. If you want to specify the real-time and other QoS properties (feature 3), you can use two newly added APIs in your program(advertiseWithQoS() and subscribeWithQoS()). More details can be found in the user's manual of micROS RT ([download](https://github.com/cyberdb/micROS-RT/blob/master/docs/manual.pdf)).\r\n\r\n# Installation\r\n\r\nCurrently, micROS RT is modified based on ROS Indigo. However, the version modified based on ROS Hydro will be provided soon. You can install micROS RT in two different ways: binary library or source code.\r\n\r\n### Installing from binary library\r\n\r\nStep1: Replacing official ROS C++ Kernel with micROS RT\r\n\r\n(1) Installing ROS Indigo.\r\n\r\n(2) Installing OpenSplice DDS 6.4 community version ([http://www.prismtech.com/opensplice/opensplice-dds-community](http://www.prismtech.com/opensplice/opensplice-dds-community)).\r\n\r\n(3) Please ensure that the DDS environment variables have been set correctly. Usually, you can achieve this goal by simply running \"source %DDSInstallationPath%/release.com\".\r\n\r\n(4) Downloading libroscpp.so from [here](https://github.com/cyberdb/micROS-RT/tree/master/lib). Please select the appropriate directory according to you ROS version and OS bits (indigo 64bit or indigo 32bit).\r\n\r\n(5) Replacing the libroscpp.so in the ROS library directory (usually /opt/indigo/lib/) with the file you downloaded.\r\n\r\nStep2: Adding micROS RT development suppport (_optional_)\r\n\r\n(6) If you want to use micROS-RT newly added APIs in you program, please download the micROS-RT header files from [here](https://github.com/cyberdb/micROS-RT/blob/master/lib/include.indigo.tar.gz) (by pressing the “raw” button)  and extract them into the %ROSInstallationPath%/include/ros directory (usually /opt/indigo/include/ros). You will be prompted that several files are replaced.\r\n\r\n### Installing from source code\r\n\r\n(1) Installing ROS Indigo from source code ([http://wiki.ros.org/indigo/Installation/Source](http://wiki.ros.org/indigo/Installation/Source))\r\n\r\n(2) Installing OpenSplice DDS 6.4 community version ([http://www.prismtech.com/opensplice/opensplice-dds-community](http://www.prismtech.com/opensplice/opensplice-dds-community)).\r\n\r\n(3) Please ensure that the DDS environment variables have been set correctly. Usually, you can achieve this goal by simply running \"source %DDSInstallationPath%/release.com\". And since you will compile ROS cpp core with DDS devlopment support, the DDSInstallationPath should be the HDE directory of OpenSplice DDS.\r\n\r\n(4) Downloading the modified roscpp source code from [here](https://github.com/cyberdb/micROS-RT/blob/master/src/roscpp.tar.gz) (by pressing the “raw” button) and extracting it.\r\n\r\n(5) Replacing %ROSInstallationPath%/src/ros_comm/roscpp directory with the directory you downloaded.\r\n\r\n(6) Recompiling the roscpp package. You can add “--pkg roscpp” to the catkin_make_isolated command to achieve this goal.\r\n\r\n# Development\r\n\r\nSee the user's manual of MmcROS RT ([download](https://github.com/cyberdb/micROS-RT/blob/master/docs/manual.pdf)).\r\n\r\nPlease contact us through [bding@msn.com](mailto:bding@msn.com). Any feedback would be greatly appreciated.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}